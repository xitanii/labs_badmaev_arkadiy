//В языке C++, размер массива std::vector изменяется с помощью методов класса std::vector, таких как push_back, pop_back, resize, insert и erase.
	//  Эти методы позволяют добавлять, удалять и изменять элементы массива std::vector, что автоматически меняет его длину.
	//  Это делает std::vector удобным инструментом для работы с динамическими массивами данных в C++.
#include <iostream>
#include <vector>

int main() {
    std::vector<int> vec; // Создание пустого вектора

    // Добавление элементов в вектор
    for (int i = 1; i <= 5; i++) {
        vec.push_back(i); // добавляем элементы в конец вектора
    }

    // Вывод элементов вектора
    std::cout << "Размер вектора: " << vec.size() << std::endl;
    std::cout << "Элементы вектора: ";
    for (int i : vec) {
        std::cout << i << " ";
    }
    std::cout << std::endl;

    // Изменение размера вектора
    vec.resize(8); // изменяем размер вектора на 8 элементов

    // Вывод элементов вектора после изменения размера
    std::cout << "Новый размер вектора: " << vec.size() << std::endl;
    std::cout << "Элементы вектора после изменения размера: ";
    for (int i : vec) {
        std::cout << i << " ";
    }
    std::cout << std::endl;
    // Определение емкости и размера вектора
    std::cout << "Capacity: " << vec.capacity() << std::endl; // 0
    std::cout << "Size: " << vec.size() << std::endl; // 0

    // Добавление элементов
    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3);

    std::cout << "Capacity: " << vec.capacity() << std::endl; // 4 (обычно увеличивается в два раза)
    std::cout << "Size: " << vec.size() << std::endl; // 3

    // Уменьшение емкости до текущего размера
    vec.shrink_to_fit();
    std::cout << "Capacity after shrink_to_fit: " << vec.capacity() << std::endl; // 3

    // Изменение размера вектора
    vec.resize(5); // добавит два элемента со значением по умолчанию
    std::cout << "Size after resize: " << vec.size() << std::endl; // 5

    // Резервирование памяти для указанного количества элементов
    vec.reserve(10);
    std::cout << "Capacity after reserve: " << vec.capacity() << std::endl; // 10
    vec.erase(vec.begin() + 1);//удаление второго символа в последовательности vec
    vec.insert(vec.begin() + 1, 5);// добавляем перед вторым символом последовательности vec число 5
    vec.clear();//очищает полностью последовательность vec
    return 0;
}
//Capacity - это максимальное количество элементов, которое может быть хранено в векторе без выделения новой памяти. Size - это текущее количество элементов в векторе.

//Shrink_to_fit - уменьшает емкость вектора до его текущего размера.

//Resize - изменяет размер вектора, добавляя или удаляя элементы.Если новый размер больше текущего, новые элементы будут заполнены значением по умолчанию.

//Reserve - резервирует память для указанного количества элементов без добавления самих элементов
//Знаки < и > используются при создании std::vector для указания типа элементов, которые будут храниться в векторе
//Проверка границ: Функция at() включает в себя проверку на выход за границы вектора и генерирует исключение std::out_of_range в случае, если индекс выходит за допустимые границы. Оператор [] не включает такую проверку и может привести к неопределенному поведению в случае, если индекс выходит за границы вектора.

//Синтаксис: Использование оператора[] более удобно и кратко, чем вызов функции at().